name: CI/CD for Spring Boot on AWS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Gradle 빌드 준비
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Gradle 실행 권한 추가 및 빌드
      - name: Add execute permission for Gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      # 4. Docker 이미지 빌드 및 Docker Hub 푸시
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG=dgf0020/pawstime:${{ github.sha }}
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

      # 5. EC2에 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            # 기존 Spring Boot 컨테이너 강제 중지 및 제거
            docker ps -q --filter "name=springboot_app" | grep -q . && docker rm -f springboot_app || true
        
            # 기존 React 컨테이너 강제 중지 및 제거
            docker ps -q --filter "name=react_app" | grep -q . && docker rm -f react_app || true
        
            # Spring Boot 컨테이너 이미지 태그 업데이트
            sed -i "s|image: dgf0020/pawstime:.*|image: dgf0020/pawstime:${{ github.sha }}|" /home/***/app/docker-compose.yml
        
            # React 컨테이너 항상 최신 이미지 사용
            sed -i "s|image: react_frontend:.*|image: react_frontend:latest|" /home/***/app/docker-compose.yml
        
            # 환경 변수 설정 (GitHub Secrets에서 전달된 값)
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            export AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}
            export KAKAO_MAP_API_KEY=${{ secrets.KAKAO_MAP_API_KEY }}
        
            # 최신 React 프론트엔드 이미지 가져오기
            docker-compose -f /home/***/app/docker-compose.yml pull react
        
            # 컨테이너 재시작
            docker-compose -f /home/***/app/docker-compose.yml up -d springboot react
